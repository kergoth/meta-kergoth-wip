#!/bin/sh

usage () {
    cat >&2 <<END
${0##*/} [OPTIONS..] [[LAYER]..]

Configure BBLAYERS to include the specified layers (by name, for a distro,
machine, or sdkmachine).

LAYER is a layer's name, as specified in BBFILE_COLLECTIONS in the layer.conf.

Options:

  -d DISTRO     Include the layer which includes conf/distro/DISTRO.conf
  -m MACHINE    Include the layer which includes conf/machine/MACHINE.conf
  -M SDKMACHINE Include the layer which includes conf/machine-sdk/SDKMACHINE.conf
  -k            Keep the existing layers rather than starting fresh
  -s            Sort BBLAYERS by layer priority
END
    exit 2
}

distro=
machine=
sdkmachine=
sort=0
keep_existing=0
while getopts d:m:M:ksh opt; do
    case "$opt" in
        d)
            distro="$OPTARG"
            ;;
        m)
            machine="$OPTARG"
            ;;
        M)
            sdkmachine="$OPTARG"
            ;;
        k)
            keep_existing=1
            ;;
        s)
            sort=1
            ;;
        \?|h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))


layersfile="$(mktemp -t "${0##*/}.XXXXXX")" || exit 1
trap 'rm -f "$layersfile"' EXIT INT TERM

if [ $# -ne 0 ]; then
    bitbake-layers find-layer-by-name "$@" >>"$layersfile"
fi

set --
if [ -n "$distro" ]; then
    set -- "conf/distro/${distro}.conf"
fi
if [ -n "$machine" ]; then
    set -- "$@" "conf/machine/${machine}.conf"
fi
if [ -n "$sdkmachine" ]; then
    set -- "$@" "conf/machine-sdk/${sdkmachine}.conf"
fi
if [ $# -ne 0 ]; then
    bitbake-layers find-layer-with-path lib/bblayers/mel.py "$@" >>"$layersfile"
fi

if [ $keep_existing -eq 0 ]; then
    # We don't want to reset until after we find the layers, so we prefer the
    # layers already configured in BBLAYERS now to those we find on disk.
    bitbake-layers reset-layers
fi

cat "$layersfile" | tr '\n' '\0' | xargs -0 -n 1 bitbake-layers add-layer

if [ $sort -eq 1 ]; then
    bitbake-layers sort-layers
fi
